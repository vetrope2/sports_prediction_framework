window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "model", "modulename": "model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.FlatModel", "modulename": "model.FlatModel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.FlatModel.FlatModel", "modulename": "model.FlatModel", "qualname": "FlatModel", "kind": "class", "doc": "<p></p>\n", "bases": "model.NeuralModel.NeuralModel"}, {"fullname": "model.FlatModel.FlatModel.__init__", "modulename": "model.FlatModel", "qualname": "FlatModel.__init__", "kind": "function", "doc": "<p>Initialize the FlatModel. Creates an instance of the TorchFlat model and sets it up.</p>\n\n<p>Args:\n    pretrained_weights (Optional[torch.Tensor]): Weights to initialize the model with,\n                                                  if provided. Defaults to None.\n    **kwargs: Additional keyword arguments passed to the parent class initializer.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained_weights</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "model.FlatModel.FlatModel.params", "modulename": "model.FlatModel", "qualname": "FlatModel.params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.FlatModel.FlatModel.pretrained_weights", "modulename": "model.FlatModel", "qualname": "FlatModel.pretrained_weights", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.FlatModel.FlatModel.model", "modulename": "model.FlatModel", "qualname": "FlatModel.model", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "model.FlatModel.FlatModel.set_parameters_from_wrapper", "modulename": "model.FlatModel", "qualname": "FlatModel.set_parameters_from_wrapper", "kind": "function", "doc": "<p>Adjust the model parameters based on the provided MatchWrapper.</p>\n\n<p>Args:\n    wrapper (MatchWrapper): The wrapper that contains match-related data used to\n                             configure the model (e.g., number of teams).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">sport</span><span class=\"o\">.</span><span class=\"n\">MatchWrapper</span><span class=\"o\">.</span><span class=\"n\">MatchWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "model.FlatModel.FlatModel.reset_state", "modulename": "model.FlatModel", "qualname": "FlatModel.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.GNNModel", "modulename": "model.GNNModel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.GNNModel.GNNModel", "modulename": "model.GNNModel", "qualname": "GNNModel", "kind": "class", "doc": "<p></p>\n", "bases": "model.NeuralModel.NeuralModel"}, {"fullname": "model.GNNModel.GNNModel.__init__", "modulename": "model.GNNModel", "qualname": "GNNModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;embed_dim&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_conv&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;conv_dim&#39;</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_dense&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dense_dim&#39;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;activation&#39;</span><span class=\"p\">:</span> <span class=\"n\">LeakyReLU</span><span class=\"p\">(</span><span class=\"n\">negative_slope</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">),</span> <span class=\"s1\">&#39;architecture_type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;out_dim&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "model.GNNModel.GNNModel.in_cols", "modulename": "model.GNNModel", "qualname": "GNNModel.in_cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;HID&#x27;, &#x27;AID&#x27;, &#x27;HS&#x27;, &#x27;AS&#x27;, &#x27;Date&#x27;, &#x27;League&#x27;]"}, {"fullname": "model.GNNModel.GNNModel.name", "modulename": "model.GNNModel", "qualname": "GNNModel.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;gnn&#x27;"}, {"fullname": "model.GNNModel.GNNModel.default_parameters", "modulename": "model.GNNModel", "qualname": "GNNModel.default_parameters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;embed_dim&#x27;: 10, &#x27;n_conv&#x27;: 3, &#x27;conv_dim&#x27;: 32, &#x27;n_dense&#x27;: 5, &#x27;dense_dim&#x27;: 8, &#x27;activation&#x27;: LeakyReLU(negative_slope=0.01), &#x27;architecture_type&#x27;: &#x27;rectangle&#x27;, &#x27;out_dim&#x27;: 3}"}, {"fullname": "model.GNNModel.GNNModel.graph", "modulename": "model.GNNModel", "qualname": "GNNModel.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.GNNModel.GNNModel.model", "modulename": "model.GNNModel", "qualname": "GNNModel.model", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "model.GNNModel.GNNModel.set_parameters_from_wrapper", "modulename": "model.GNNModel", "qualname": "GNNModel.set_parameters_from_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">sport</span><span class=\"o\">.</span><span class=\"n\">MatchWrapper</span><span class=\"o\">.</span><span class=\"n\">MatchWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.GNNModel.GNNModel.get_train_scope", "modulename": "model.GNNModel", "qualname": "GNNModel.get_train_scope", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.GNNModel.GNNModel.get_test_scope", "modulename": "model.GNNModel", "qualname": "GNNModel.get_test_scope", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.Model", "modulename": "model.Model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.Model.Model", "modulename": "model.Model", "qualname": "Model", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "model.Model.Model.__init__", "modulename": "model.Model", "qualname": "Model.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "model.Model.Model.in_cols", "modulename": "model.Model", "qualname": "Model.in_cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "model.Model.Model.model", "modulename": "model.Model", "qualname": "Model.model", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "model.Model.Model.fit", "modulename": "model.Model", "qualname": "Model.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.Model.Model.predict", "modulename": "model.Model", "qualname": "Model.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "model.Model.Model.set_parameters_from_wrapper", "modulename": "model.Model", "qualname": "Model.set_parameters_from_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.Model.Model.reset_state", "modulename": "model.Model", "qualname": "Model.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.Model.Model.set_params", "modulename": "model.Model", "qualname": "Model.set_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.Model.Model.log_params", "modulename": "model.Model", "qualname": "Model.log_params", "kind": "function", "doc": "<p>Log the model's constructor parameters to MLflow using MLFlowTracker.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>RuntimeError\n    If MLFlowTracker has no active run.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "model.NeuralModel", "modulename": "model.NeuralModel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.NeuralModel.NeuralModel", "modulename": "model.NeuralModel", "qualname": "NeuralModel", "kind": "class", "doc": "<p></p>\n", "bases": "model.Model.Model"}, {"fullname": "model.NeuralModel.NeuralModel.__init__", "modulename": "model.NeuralModel", "qualname": "NeuralModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "model.NeuralModel.NeuralModel.in_cols", "modulename": "model.NeuralModel", "qualname": "NeuralModel.in_cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;HID&#x27;, &#x27;AID&#x27;, &#x27;HS&#x27;, &#x27;AS&#x27;, &#x27;Date&#x27;]"}, {"fullname": "model.NeuralModel.NeuralModel.fit", "modulename": "model.NeuralModel", "qualname": "NeuralModel.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.NeuralModel.NeuralModel.predict", "modulename": "model.NeuralModel", "qualname": "NeuralModel.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;test&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "model.Scikit", "modulename": "model.Scikit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.Scikit.ScikitModel", "modulename": "model.Scikit", "qualname": "ScikitModel", "kind": "class", "doc": "<p>A wrapper for scikit-learn estimators that integrates seamlessly into a broader modeling interface.</p>\n\n<p>This class handles preprocessing of labels and dynamically selects between <code>predict</code> and\n<code>predict_proba</code> based on the type of model and its capabilities.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>model_class : Type[BaseEstimator]\n    A scikit-learn model class (e.g., <code>RandomForestClassifier</code>, <code>LinearRegression</code>).\n**model_params : dict\n    Parameters to pass to the model class constructor.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>scikit_model : BaseEstimator\n    An instance of the scikit-learn estimator.\nis_classifier : bool\n    Flag indicating whether the estimator is a classifier.</p>\n", "bases": "model.Model.Model"}, {"fullname": "model.Scikit.ScikitModel.__init__", "modulename": "model.Scikit", "qualname": "ScikitModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseEstimator</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">model_params</span></span>)</span>"}, {"fullname": "model.Scikit.ScikitModel.scikit_model", "modulename": "model.Scikit", "qualname": "ScikitModel.scikit_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.Scikit.ScikitModel.is_classifier", "modulename": "model.Scikit", "qualname": "ScikitModel.is_classifier", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.Scikit.ScikitModel.fit", "modulename": "model.Scikit", "qualname": "ScikitModel.fit", "kind": "function", "doc": "<p>Fit the scikit-learn model to the provided features and labels.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>features : pd.DataFrame\n    DataFrame of shape (n_samples, n_features) containing the input features.</p>\n\n<p>labels : pd.DataFrame\n    DataFrame of shape (n_samples, 1) containing the target values.\n    Will be converted to a Series internally.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>AssertionError\n    If the <code>labels</code> DataFrame does not contain exactly one column.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.Scikit.ScikitModel.predict", "modulename": "model.Scikit", "qualname": "ScikitModel.predict", "kind": "function", "doc": "<p>Make predictions on new data using the trained model.</p>\n\n<p>For classifiers with <code>predict_proba</code> support, returns class probabilities.\nOtherwise, falls back to <code>predict()</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : pd.DataFrame\n    DataFrame of shape (n_samples, n_features) containing the input features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.ndarray\n    Array of predictions or class probabilities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "model.Scikit.ScikitModel.reset_state", "modulename": "model.Scikit", "qualname": "ScikitModel.reset_state", "kind": "function", "doc": "<p>Reset the internal scikit-learn model to its initial untrained state.</p>\n\n<p>Uses <code>sklearn.base.clone</code> to create a fresh copy of the estimator with the same parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner", "modulename": "learner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "learner.Learner", "modulename": "learner.Learner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "learner.Learner.Learner", "modulename": "learner.Learner", "qualname": "Learner", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "learner.Learner.Learner.__init__", "modulename": "learner.Learner", "qualname": "Learner.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trainer</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Trainer</span><span class=\"o\">.</span><span class=\"n\">Trainer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tester</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Tester</span><span class=\"o\">.</span><span class=\"n\">Tester</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">DataSelector</span><span class=\"o\">.</span><span class=\"n\">DataSelector</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "learner.Learner.Learner.trainer", "modulename": "learner.Learner", "qualname": "Learner.trainer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "learner.Learner.Learner.tester", "modulename": "learner.Learner", "qualname": "Learner.tester", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "learner.Learner.Learner.scope", "modulename": "learner.Learner", "qualname": "Learner.scope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "learner.Learner.Learner.compute", "modulename": "learner.Learner", "qualname": "Learner.compute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.Learner.train_test", "modulename": "learner.Learner", "qualname": "Learner.train_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.Learner.train", "modulename": "learner.Learner", "qualname": "Learner.train", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.Learner.test", "modulename": "learner.Learner", "qualname": "Learner.test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.Learner.set_model_hyper_params", "modulename": "learner.Learner", "qualname": "Learner.set_model_hyper_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.Learner.reset_state", "modulename": "learner.Learner", "qualname": "Learner.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.Learner.update", "modulename": "learner.Learner", "qualname": "Learner.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.LearnerWithoutScope", "modulename": "learner.Learner", "qualname": "LearnerWithoutScope", "kind": "class", "doc": "<p></p>\n", "bases": "Learner"}, {"fullname": "learner.Learner.LearnerWithoutScope.__init__", "modulename": "learner.Learner", "qualname": "LearnerWithoutScope.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trainer</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Trainer</span><span class=\"o\">.</span><span class=\"n\">Trainer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tester</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Tester</span><span class=\"o\">.</span><span class=\"n\">Tester</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "learner.Learner.LearnerWithoutScope.train_test", "modulename": "learner.Learner", "qualname": "LearnerWithoutScope.train_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.UpdatingLearner", "modulename": "learner.Learner", "qualname": "UpdatingLearner", "kind": "class", "doc": "<p>Represents a looping, self-updating learner while a given condition holds true</p>\n", "bases": "Learner"}, {"fullname": "learner.Learner.UpdatingLearner.__init__", "modulename": "learner.Learner", "qualname": "UpdatingLearner.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trainer</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Trainer</span><span class=\"o\">.</span><span class=\"n\">Trainer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tester</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Tester</span><span class=\"o\">.</span><span class=\"n\">Tester</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">DataSelector</span><span class=\"o\">.</span><span class=\"n\">DataSelector</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">learners</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "learner.Learner.UpdatingLearner.learners", "modulename": "learner.Learner", "qualname": "UpdatingLearner.learners", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "learner.Learner.UpdatingLearner.train_test", "modulename": "learner.Learner", "qualname": "UpdatingLearner.train_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Learner.UpdatingLearner.reset_state", "modulename": "learner.Learner", "qualname": "UpdatingLearner.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Tester", "modulename": "learner.Tester", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "learner.Tester.Tester", "modulename": "learner.Tester", "qualname": "Tester", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "learner.Tester.Tester.__init__", "modulename": "learner.Tester", "qualname": "Tester.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">Model</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "learner.Tester.Tester.model", "modulename": "learner.Tester", "qualname": "Tester.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "learner.Tester.Tester.compute", "modulename": "learner.Tester", "qualname": "Tester.compute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "learner.Tester.Tester.test", "modulename": "learner.Tester", "qualname": "Tester.test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "learner.Trainer", "modulename": "learner.Trainer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "learner.Trainer.Trainer", "modulename": "learner.Trainer", "qualname": "Trainer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "learner.Trainer.Trainer.__init__", "modulename": "learner.Trainer", "qualname": "Trainer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">Model</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "learner.Trainer.Trainer.model", "modulename": "learner.Trainer", "qualname": "Trainer.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "learner.Trainer.Trainer.compute", "modulename": "learner.Trainer", "qualname": "Trainer.compute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Trainer.Trainer.train", "modulename": "learner.Trainer", "qualname": "Trainer.train", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "learner.Trainer.Trainer.reset_state", "modulename": "learner.Trainer", "qualname": "Trainer.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader", "modulename": "dataloader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dataloader.Connector", "modulename": "dataloader.Connector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dataloader.Connector.BASE_DIR", "modulename": "dataloader.Connector", "qualname": "BASE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/mnt/c/Users/jango/Desktop/framework/sports_prediction_framework/dataloader&#x27;"}, {"fullname": "dataloader.Connector.dotenv_path", "modulename": "dataloader.Connector", "qualname": "dotenv_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/mnt/c/Users/jango/Desktop/framework/sports_prediction_framework/dataloader/../.env&#x27;"}, {"fullname": "dataloader.Connector.Connector", "modulename": "dataloader.Connector", "qualname": "Connector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "dataloader.Connector.Connector.config", "modulename": "dataloader.Connector", "qualname": "Connector.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dataloader.Connector.Connector.connect_to_db", "modulename": "dataloader.Connector", "qualname": "Connector.connect_to_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.Connector.Connector.connect_to_db_via_ssh", "modulename": "dataloader.Connector", "qualname": "Connector.connect_to_db_via_ssh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.Connector.Connector.close", "modulename": "dataloader.Connector", "qualname": "Connector.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.Connector.Connector.get_engine", "modulename": "dataloader.Connector", "qualname": "Connector.get_engine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataLoader", "modulename": "dataloader.DataLoader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dataloader.DataLoader.DataLoader", "modulename": "dataloader.DataLoader", "qualname": "DataLoader", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "dataloader.DataLoader.DataLoader.load", "modulename": "dataloader.DataLoader", "qualname": "DataLoader.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataLoader.DataLoader.load_distinct", "modulename": "dataloader.DataLoader", "qualname": "DataLoader.load_distinct", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span>,</span><span class=\"param\">\t<span class=\"n\">distinct_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataLoader.DataLoader.preview", "modulename": "dataloader.DataLoader", "qualname": "DataLoader.preview", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span>,</span><span class=\"param\">\t<span class=\"n\">distinct_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataLoader.DataLoader.load_and_wrap", "modulename": "dataloader.DataLoader", "qualname": "DataLoader.load_and_wrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span>,</span><span class=\"param\">\t<span class=\"n\">sport</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">SportType</span><span class=\"o\">.</span><span class=\"n\">SportType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataLoader.DataLoader.load_and_wrap_odds", "modulename": "dataloader.DataLoader", "qualname": "DataLoader.load_and_wrap_odds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span>,</span><span class=\"param\">\t<span class=\"n\">sport</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">SportType</span><span class=\"o\">.</span><span class=\"n\">SportType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bookmaker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource", "modulename": "dataloader.DataSource", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dataloader.DataSource.DataSource", "modulename": "dataloader.DataSource", "qualname": "DataSource", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "dataloader.DataSource.DataSource.__init__", "modulename": "dataloader.DataSource", "qualname": "DataSource.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sport_type</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">SportType</span><span class=\"o\">.</span><span class=\"n\">SportType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">via_ssh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "dataloader.DataSource.DataSource.con", "modulename": "dataloader.DataSource", "qualname": "DataSource.con", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dataloader.DataSource.DataSource.db_type", "modulename": "dataloader.DataSource", "qualname": "DataSource.db_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dataloader.DataSource.DataSource.plain_query", "modulename": "dataloader.DataSource", "qualname": "DataSource.plain_query", "kind": "function", "doc": "<p>Executes a raw SQL query provided in the query string. This method is dangerous\nbecause it directly interpolates user input into the SQL query string, which can lead\nto SQL injection attacks, since the input is not sanitized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource.DataSource.parse_data", "modulename": "dataloader.DataSource", "qualname": "DataSource.parse_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource.DataSource.query", "modulename": "dataloader.DataSource", "qualname": "DataSource.query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource.DataSource.query_no_parse", "modulename": "dataloader.DataSource", "qualname": "DataSource.query_no_parse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource.DataSource.preview_query", "modulename": "dataloader.DataSource", "qualname": "DataSource.preview_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource.DataSource.query_distinct", "modulename": "dataloader.DataSource", "qualname": "DataSource.query_distinct", "kind": "function", "doc": "<p>This function executes a SQL query that retrieves distinct rows based on a specific column,\nwhile returning all columns from the table.</p>\n\n<p>WARNING: This query uses PostgreSQL-specific feature <code>DISTINCT ON</code>.</p>\n\n<p>Arguments:\n    schema_name (str): The schema of the table.\n    table_name (str): The name of the table.\n    filter_func (callable): A filter function to apply on the table's columns.\n    distinct_cols (list): List of columns to apply DISTINCT ON.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">filter_func</span>,</span><span class=\"param\">\t<span class=\"n\">distinct_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dataloader.DataSource.DataSource.close", "modulename": "dataloader.DataSource", "qualname": "DataSource.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper", "modulename": "datawrapper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataHandler", "modulename": "datawrapper.DataHandler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataHandler.DataHandler", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataHandler.DataHandler.__init__", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">feature_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prediction_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "datawrapper.DataHandler.DataHandler.dataframe", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.dataframe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataHandler.DataHandler.prediction_cols", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.prediction_cols", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataHandler.DataHandler.get_dataframe", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.get_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.set_dataframe", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.set_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.get_features", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.get_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.add_features", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.add_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">features</span>, </span><span class=\"param\"><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.get_labels", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.get_labels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.add_labels", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.add_labels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.get_predictions", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.get_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.add_predictions", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.add_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predictions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.get_columns", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.get_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.add_columns", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.add_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataHandler.copy", "modulename": "datawrapper.DataHandler", "qualname": "DataHandler.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">feat_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataHandler.DataMerger", "modulename": "datawrapper.DataHandler", "qualname": "DataMerger", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataHandler.DataMerger.merge_data_handlers", "modulename": "datawrapper.DataHandler", "qualname": "DataMerger.merge_data_handlers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\thandlers: [&lt;class &#x27;datawrapper.DataHandler.DataHandler&#x27;&gt;]</span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataHandler</span><span class=\"o\">.</span><span class=\"n\">DataHandler</span>:</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper", "modulename": "datawrapper.DataWrapper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataWrapper.DataWrapper", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.__init__", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_handler</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataHandler</span><span class=\"o\">.</span><span class=\"n\">DataHandler</span>,</span><span class=\"param\">\t<span class=\"n\">home_advantage</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.season_column", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.season_column", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Season&#x27;"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.name_columns", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.name_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.name_id_columns", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.name_id_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.prediction_columns", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.prediction_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.score_columns", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.score_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.result_column", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.result_column", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.data_handler", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.get_dataframe", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.get_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.set_dataframe", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.set_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.get_features", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.get_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.add_features", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.add_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">features</span>, </span><span class=\"param\"><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.add_features_from_csv", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.add_features_from_csv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.get_labels", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.get_labels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.add_labels", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.add_labels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.get_predictions", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.get_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.add_predictions", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.add_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predictions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.add_columns", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.add_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.get_columns", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.get_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_names</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.set_after_compute_values", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.set_after_compute_values", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.empty", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.deepcopy", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.deepcopy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">feat_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.DataWrapper.DataWrapper.copy", "modulename": "datawrapper.DataWrapper", "qualname": "DataWrapper.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_handler</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataHandler</span><span class=\"o\">.</span><span class=\"n\">DataHandler</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.SportType", "modulename": "datawrapper.SportType", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "datawrapper.SportType.SportType", "modulename": "datawrapper.SportType", "qualname": "SportType", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "datawrapper.SportType.SportType.FOOTBALL", "modulename": "datawrapper.SportType", "qualname": "SportType.FOOTBALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SportType.FOOTBALL: (&lt;class &#x27;dataloader.parser.MatchParser.MatchParser&#x27;&gt;, &lt;class &#x27;datawrapper.sport.match.FootballWrapper.FootballWrapper&#x27;&gt;)&gt;"}, {"fullname": "datawrapper.SportType.SportType.GOLF", "modulename": "datawrapper.SportType", "qualname": "SportType.GOLF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SportType.GOLF: (&lt;class &#x27;dataloader.parser.RaceParser.RaceParser&#x27;&gt;, &lt;class &#x27;datawrapper.sport.race.GolfWrapper.GolfWrapper&#x27;&gt;)&gt;"}, {"fullname": "datawrapper.SportType.SportType.get_parser", "modulename": "datawrapper.SportType", "qualname": "SportType.get_parser", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "datawrapper.SportType.SportType.get_wrapper", "modulename": "datawrapper.SportType", "qualname": "SportType.get_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimizer", "modulename": "optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer", "modulename": "optimizer.Optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer", "modulename": "optimizer.Optimizer", "qualname": "Optimizer", "kind": "class", "doc": "<p>A class for optimizing hyperparameters using Optuna.</p>\n\n<p>Attributes:\n    wrapper (DataWrapper): Data handling object for training and evaluation.\n    learner (Learner): Model wrapper that can be trained and evaluated.\n    metric (Metric): Metric enum used for evaluation (e.g., Accuracy, F1 Score).\n    search_space (dict): Dictionary defining the hyperparameter search space.\n    n_trials (int): Number of trials to run during optimization.\n    direction (str): Optimization direction ('maximize' or 'minimize').\n    sampler (optuna.samplers.BaseSampler, optional): Sampler for Optuna study.</p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.__init__", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">learner</span><span class=\"p\">:</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">Learner</span><span class=\"o\">.</span><span class=\"n\">Learner</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Evaluation</span><span class=\"o\">.</span><span class=\"n\">Metric</span>,</span><span class=\"param\">\t<span class=\"n\">search_space</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_trials</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;maximize&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sampler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">optuna</span><span class=\"o\">.</span><span class=\"n\">samplers</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">BaseSampler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "optimizer.Optimizer.Optimizer.wrapper", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.wrapper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.learner", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.learner", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.metric", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.search_space", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.search_space", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.n_trials", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.n_trials", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.direction", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.sampler", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.sampler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.study", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.study", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "optimizer.Optimizer.Optimizer.run", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.run", "kind": "function", "doc": "<p>Runs the optimization process using Optuna.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimizer.Optimizer.Optimizer.best_params", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.best_params", "kind": "function", "doc": "<p>Returns the best hyperparameters found by the optimization.</p>\n\n<p>Returns:\n    dict: Best hyperparameters if available, else an empty dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "optimizer.Optimizer.Optimizer.best_value", "modulename": "optimizer.Optimizer", "qualname": "Optimizer.best_value", "kind": "function", "doc": "<p>Returns the best metric value achieved during the optimization.</p>\n\n<p>Returns:\n    float: Best value if available, else NaN.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "simulation", "modulename": "simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation.EVSimulation", "modulename": "simulation.EVSimulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation.EVSimulation.EVSimulation", "modulename": "simulation.EVSimulation", "qualname": "EVSimulation", "kind": "class", "doc": "<p>A betting simulation strategy based on Expected Value (EV).</p>\n\n<p>Bets are placed only on matches where the EV is positive, calculated as:\n    EV = (prob * (odds - 1)) - (1 - prob)</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>stake : float\n    The fixed amount to bet on each qualified match.</p>\n", "bases": "simulation.Simulation.Simulation"}, {"fullname": "simulation.EVSimulation.EVSimulation.__init__", "modulename": "simulation.EVSimulation", "qualname": "EVSimulation.__init__", "kind": "function", "doc": "<p>Initialize the EVSimulation.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>datawrapper : DataWrapper\n    A wrapper object that provides access to the match dataframe.\nstake : float\n    The fixed bet amount per qualified match (default is 1.0).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datawrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>, </span><span class=\"param\"><span class=\"n\">stake</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "simulation.EVSimulation.EVSimulation.stake", "modulename": "simulation.EVSimulation", "qualname": "EVSimulation.stake", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.EVSimulation.EVSimulation.run", "modulename": "simulation.EVSimulation", "qualname": "EVSimulation.run", "kind": "function", "doc": "<p>Run the expected value betting simulation.</p>\n\n<p>A fixed stake is placed only if the EV for the predicted outcome is positive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation.FlatBettingSimulation", "modulename": "simulation.FlatBettingSimulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation.FlatBettingSimulation.FlatBettingSimulation", "modulename": "simulation.FlatBettingSimulation", "qualname": "FlatBettingSimulation", "kind": "class", "doc": "<p>Implements a flat betting strategy simulation.</p>\n\n<p>In this simulation, a fixed stake is placed on each match based on the\nmodel's predicted outcome. If the prediction is correct, the return is\ncalculated as (odds - 1) * stake. If incorrect, the entire stake is lost.</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>stake : float\n    The fixed amount to bet on each match.</p>\n", "bases": "simulation.Simulation.Simulation"}, {"fullname": "simulation.FlatBettingSimulation.FlatBettingSimulation.__init__", "modulename": "simulation.FlatBettingSimulation", "qualname": "FlatBettingSimulation.__init__", "kind": "function", "doc": "<p>Initialize the FlatBettingSimulation.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>datawrapper : DataWrapper\n    A wrapper object that provides access to the match dataframe.\nstake : float, optional (default=1.0)\n    The fixed amount to wager on each prediction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datawrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>, </span><span class=\"param\"><span class=\"n\">stake</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "simulation.FlatBettingSimulation.FlatBettingSimulation.stake", "modulename": "simulation.FlatBettingSimulation", "qualname": "FlatBettingSimulation.stake", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.FlatBettingSimulation.FlatBettingSimulation.run", "modulename": "simulation.FlatBettingSimulation", "qualname": "FlatBettingSimulation.run", "kind": "function", "doc": "<p>Execute the flat betting simulation.</p>\n\n<p>For each row in the dataframe, places a bet on the predicted outcome.\nIf the prediction matches the actual result, calculates profit based\non the odds. Otherwise, records a loss equal to the stake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation.KellySimulation", "modulename": "simulation.KellySimulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation.KellySimulation.KellySimulation", "modulename": "simulation.KellySimulation", "qualname": "KellySimulation", "kind": "class", "doc": "<p>Kelly betting simulation.</p>\n\n<p>Bets a fraction of the bankroll based on the Kelly criterion, maximizing the\nexpected logarithmic growth of wealth.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>data_wrapper : DataWrapper\n    DataWrapper instance containing the data to simulate on.\ninitial_bankroll : float\n    The starting bankroll, default is 1.0.</p>\n", "bases": "simulation.Simulation.Simulation"}, {"fullname": "simulation.KellySimulation.KellySimulation.__init__", "modulename": "simulation.KellySimulation", "qualname": "KellySimulation.__init__", "kind": "function", "doc": "<p>Initialize KellySimulation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data_wrapper : DataWrapper\n    DataWrapper instance holding the data.\ninitial_bankroll : float, optional\n    Starting bankroll (default is 1.0).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_wrapper</span>, </span><span class=\"param\"><span class=\"n\">initial_bankroll</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "simulation.KellySimulation.KellySimulation.initial_bankroll", "modulename": "simulation.KellySimulation", "qualname": "KellySimulation.initial_bankroll", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.KellySimulation.KellySimulation.run", "modulename": "simulation.KellySimulation", "qualname": "KellySimulation.run", "kind": "function", "doc": "<p>Run the betting simulation strategy.</p>\n\n<p>This method must be implemented by subclasses to define how profits/losses\nare calculated and recorded in <code>self.results</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation.Simulation", "modulename": "simulation.Simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation.Simulation.Simulation", "modulename": "simulation.Simulation", "qualname": "Simulation", "kind": "class", "doc": "<p>Abstract base class for betting strategy simulations.</p>\n\n<p>Provides a standardized interface and shared functionality for evaluating\nbetting strategies using model predictions, actual match outcomes, and odds.</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>datawrapper : DataWrapper\n    Object providing access to the underlying match dataframe.\ndf : pandas.DataFrame\n    Copy of the dataframe containing match data, including probabilities and results.\nresults : list of float\n    List of profit/loss values for each match in the simulation.</p>\n", "bases": "abc.ABC"}, {"fullname": "simulation.Simulation.Simulation.__init__", "modulename": "simulation.Simulation", "qualname": "Simulation.__init__", "kind": "function", "doc": "<p>Initialize the Simulation base class.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>datawrapper : DataWrapper\n    A wrapper object that provides access to the match dataframe.</p>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>Drops rows with NaN in any of the probability columns (0, 1, 2).\nAlso creates a 'prediction' column based on the highest predicted probability\namong columns 0, 1, and 2, corresponding to draw, home win, and away win.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datawrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span>)</span>"}, {"fullname": "simulation.Simulation.Simulation.datawrapper", "modulename": "simulation.Simulation", "qualname": "Simulation.datawrapper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.Simulation.Simulation.df", "modulename": "simulation.Simulation", "qualname": "Simulation.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.Simulation.Simulation.results", "modulename": "simulation.Simulation", "qualname": "Simulation.results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.Simulation.Simulation.run", "modulename": "simulation.Simulation", "qualname": "Simulation.run", "kind": "function", "doc": "<p>Run the betting simulation strategy.</p>\n\n<p>This method must be implemented by subclasses to define how profits/losses\nare calculated and recorded in <code>self.results</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation.Simulation.Simulation.evaluate", "modulename": "simulation.Simulation", "qualname": "Simulation.evaluate", "kind": "function", "doc": "<p>Evaluate the simulation's performance.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>dict\n    A dictionary containing:\n        - total_return : float\n        - mean_return : float\n        - std_return : float\n        - sharpe_ratio : float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation.Simulation.Simulation.summary", "modulename": "simulation.Simulation", "qualname": "Simulation.summary", "kind": "function", "doc": "<p>Print a summary of evaluation metrics to the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation.UnderdogSimulation", "modulename": "simulation.UnderdogSimulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation.UnderdogSimulation.ThresholdUnderdogSimulation", "modulename": "simulation.UnderdogSimulation", "qualname": "ThresholdUnderdogSimulation", "kind": "class", "doc": "<p>A betting simulation that places bets on the underdog only if the odds exceed a threshold.</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>stake : float\n    The fixed amount to bet on each match.\nthreshold : float\n    The minimum odds required to place a bet.</p>\n", "bases": "simulation.Simulation.Simulation"}, {"fullname": "simulation.UnderdogSimulation.ThresholdUnderdogSimulation.__init__", "modulename": "simulation.UnderdogSimulation", "qualname": "ThresholdUnderdogSimulation.__init__", "kind": "function", "doc": "<p>Initialize the ThresholdUnderdogSimulation.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>datawrapper : DataWrapper\n    A wrapper object that provides access to the match dataframe.\nstake : float\n    The fixed bet amount per match (default is 1.0).\nthreshold : float\n    Minimum odds value required to place a bet (default is 3.0).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">datawrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">stake</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span></span>)</span>"}, {"fullname": "simulation.UnderdogSimulation.ThresholdUnderdogSimulation.stake", "modulename": "simulation.UnderdogSimulation", "qualname": "ThresholdUnderdogSimulation.stake", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.UnderdogSimulation.ThresholdUnderdogSimulation.threshold", "modulename": "simulation.UnderdogSimulation", "qualname": "ThresholdUnderdogSimulation.threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "simulation.UnderdogSimulation.ThresholdUnderdogSimulation.run", "modulename": "simulation.UnderdogSimulation", "qualname": "ThresholdUnderdogSimulation.run", "kind": "function", "doc": "<p>Run the underdog betting simulation with a minimum odds threshold.</p>\n\n<p>For each match, bet on the outcome with the highest odds if those odds exceed the threshold.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer", "modulename": "transformer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "transformer.BaseTransformer", "modulename": "transformer.BaseTransformer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "transformer.BaseTransformer.BaseTransformer", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.id_map", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.id_map", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.add_features", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.add_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">features</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.names_to_ids", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.names_to_ids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.remove_small_seasons", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.remove_small_seasons", "kind": "function", "doc": "<p>Removes seasons from the DataFrame in DataWrapper where the number of unique teams is less than min_teams.</p>\n\n<p>Args:\n    wrapper (DataWrapper): An instance of DataWrapper containing the DataFrame.\n    min_teams (int): The minimum number of unique teams required to keep a season.</p>\n\n<p>Returns:\n    DataWrapper: The modified DataWrapper with small seasons removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>, </span><span class=\"param\"><span class=\"n\">min_teams</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.get_date_from_time", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.get_date_from_time", "kind": "function", "doc": "<p>Extracts and converts dates from the 'Time' column in the DataFrame, accounting for season transitions.</p>\n\n<p>Args:\n    wrapper (DataWrapper): An instance of DataWrapper containing the DataFrame.</p>\n\n<p>Returns:\n    DataWrapper: The modified DataWrapper with the 'Date' column updated.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.get_first_odds", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.get_first_odds", "kind": "function", "doc": "<p>Modifies the DataFrame inside the DataWrapper to keep only the first betting odds for each event.</p>\n\n<p>Args:\n    wrapper (DataWrapper): An instance of DataWrapper.</p>\n\n<p>Returns:\n    wrapper</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.get_latest_odds", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.get_latest_odds", "kind": "function", "doc": "<p>Modifies the DataFrame inside the DataWrapper to keep only the last betting odds for each event.</p>\n\n<p>Args:\n    wrapper (DataWrapper): An instance of DataWrapper.</p>\n\n<p>Returns:\n    wrapper</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.BaseTransformer.BaseTransformer.get_first_and_latest_odds", "modulename": "transformer.BaseTransformer", "qualname": "BaseTransformer.get_first_and_latest_odds", "kind": "function", "doc": "<p>Modifies the DataFrame inside the DataWrapper to keep only the first and the last betting odds together.</p>\n\n<p>Args:\n    wrapper (DataWrapper): An instance of DataWrapper.</p>\n\n<p>Returns:\n    wrapper</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.DataSelector", "modulename": "transformer.DataSelector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "transformer.DataSelector.DataSelector", "modulename": "transformer.DataSelector", "qualname": "DataSelector", "kind": "class", "doc": "<p>Manages synchronized updates across training and testing data scopes.</p>\n\n<p>DataSelector coordinates iteration over combinations of training and testing\nscopes, applying logic such as updating, validation (<code>holds()</code>), and resetting\nof state. It serves as a unified interface to handle these paired scopes and\ntraverse all valid combinations recursively, even when the number of scopes differs.</p>\n\n<p>Attributes:\n    train_selectors (list[ScopeSelector]): List of training data scope selectors.\n    test_selectors (list[ScopeSelector]): List of testing data scope selectors.\n    max_index (int): The maximum number of selectors among train/test.\n    selector_index (int): The current index of the selector being updated.</p>\n"}, {"fullname": "transformer.DataSelector.DataSelector.__init__", "modulename": "transformer.DataSelector", "qualname": "DataSelector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\ttrain_selectors: [&lt;class &#x27;transformer.ScopeSelector.ScopeSelector&#x27;&gt;] = [],</span><span class=\"param\">\ttest_selectors: [&lt;class &#x27;transformer.ScopeSelector.ScopeSelector&#x27;&gt;] = [],</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "transformer.DataSelector.DataSelector.train_selectors", "modulename": "transformer.DataSelector", "qualname": "DataSelector.train_selectors", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;transformer.Scope.Scope&#x27;&gt;]"}, {"fullname": "transformer.DataSelector.DataSelector.test_selectors", "modulename": "transformer.DataSelector", "qualname": "DataSelector.test_selectors", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;transformer.Scope.Scope&#x27;&gt;]"}, {"fullname": "transformer.DataSelector.DataSelector.max_index", "modulename": "transformer.DataSelector", "qualname": "DataSelector.max_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.DataSelector.DataSelector.selector_index", "modulename": "transformer.DataSelector", "qualname": "DataSelector.selector_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.DataSelector.DataSelector.holds", "modulename": "transformer.DataSelector", "qualname": "DataSelector.holds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.DataSelector.DataSelector.update", "modulename": "transformer.DataSelector", "qualname": "DataSelector.update", "kind": "function", "doc": "<p>Recursively updates training and testing scopes in a synchronized way.</p>\n\n<p>This method performs a backtracking traversal through all valid combinations\nof training and testing scopes, calling <code>update()</code> on each scope pair and\nensuring both satisfy their <code>holds()</code> condition. If a combination fails, it\nresets the scopes and backtracks to try other possibilities.</p>\n\n<p>Handles cases where the number of training and testing scopes differs, enabling\ndistinct granularity in data iteration.</p>\n\n<p>Iteration begins at the last scope and progresses through all valid configurations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.DataSelector.DataSelector.transform_wrapper", "modulename": "transformer.DataSelector", "qualname": "DataSelector.transform_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>,</span><span class=\"param\">\tselectors: [&lt;class &#x27;transformer.ScopeSelector.ScopeSelector&#x27;&gt;]</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.DataSelector.DataSelector.transform_test", "modulename": "transformer.DataSelector", "qualname": "DataSelector.transform_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.DataSelector.DataSelector.transform_train", "modulename": "transformer.DataSelector", "qualname": "DataSelector.transform_train", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.DataSelector.DataSelector.reset_state", "modulename": "transformer.DataSelector", "qualname": "DataSelector.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope", "modulename": "transformer.Scope", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "transformer.Scope.Scope", "modulename": "transformer.Scope", "qualname": "Scope", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "transformer.Scope.Scope.__init__", "modulename": "transformer.Scope", "qualname": "Scope.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "transformer.Scope.Scope.wrapper", "modulename": "transformer.Scope", "qualname": "Scope.wrapper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.Scope.Scope.parameters", "modulename": "transformer.Scope", "qualname": "Scope.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.Scope.Scope.shift", "modulename": "transformer.Scope", "qualname": "Scope.shift", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.Scope.inside", "modulename": "transformer.Scope", "qualname": "Scope.inside", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.Scope.reset_state", "modulename": "transformer.Scope", "qualname": "Scope.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.Scope.current_state", "modulename": "transformer.Scope", "qualname": "Scope.current_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.WindowScope", "modulename": "transformer.Scope", "qualname": "WindowScope", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Scope"}, {"fullname": "transformer.Scope.WindowScope.__init__", "modulename": "transformer.Scope", "qualname": "WindowScope.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;col&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Season&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;start&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"s1\">&#39;max&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"s1\">&#39;size&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;stride&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span></span>)</span>"}, {"fullname": "transformer.Scope.WindowScope.default_parameters", "modulename": "transformer.Scope", "qualname": "WindowScope.default_parameters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;col&#x27;: &#x27;Season&#x27;, &#x27;start&#x27;: 2000, &#x27;max&#x27;: 2005, &#x27;size&#x27;: 1, &#x27;stride&#x27;: 2}"}, {"fullname": "transformer.Scope.WindowScope.reset_state", "modulename": "transformer.Scope", "qualname": "WindowScope.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.WindowScope.current_state", "modulename": "transformer.Scope", "qualname": "WindowScope.current_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.ScopeExpander", "modulename": "transformer.Scope", "qualname": "ScopeExpander", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "WindowScope"}, {"fullname": "transformer.Scope.ScopeExpander.shift", "modulename": "transformer.Scope", "qualname": "ScopeExpander.shift", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.ScopeExpander.inside", "modulename": "transformer.Scope", "qualname": "ScopeExpander.inside", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.ScopeRoller", "modulename": "transformer.Scope", "qualname": "ScopeRoller", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "WindowScope"}, {"fullname": "transformer.Scope.ScopeRoller.shift", "modulename": "transformer.Scope", "qualname": "ScopeRoller.shift", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.ScopeRoller.inside", "modulename": "transformer.Scope", "qualname": "ScopeRoller.inside", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.EnumScope", "modulename": "transformer.Scope", "qualname": "EnumScope", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Scope"}, {"fullname": "transformer.Scope.EnumScope.__init__", "modulename": "transformer.Scope", "qualname": "EnumScope.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wrapper</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;col&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;League&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;enum&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;GER1&#39;</span><span class=\"p\">]}</span></span>)</span>"}, {"fullname": "transformer.Scope.EnumScope.default_parameters", "modulename": "transformer.Scope", "qualname": "EnumScope.default_parameters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;col&#x27;: &#x27;League&#x27;, &#x27;enum&#x27;: [&#x27;GER1&#x27;]}"}, {"fullname": "transformer.Scope.EnumScope.cur_index", "modulename": "transformer.Scope", "qualname": "EnumScope.cur_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "transformer.Scope.EnumScope.set_parameters_from_wrapper", "modulename": "transformer.Scope", "qualname": "EnumScope.set_parameters_from_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.EnumScope.shift", "modulename": "transformer.Scope", "qualname": "EnumScope.shift", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.EnumScope.inside", "modulename": "transformer.Scope", "qualname": "EnumScope.inside", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.EnumScope.reset_state", "modulename": "transformer.Scope", "qualname": "EnumScope.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.EnumScope.current_state", "modulename": "transformer.Scope", "qualname": "EnumScope.current_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Scope.TestingWindowScope", "modulename": "transformer.Scope", "qualname": "TestingWindowScope", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "WindowScope"}, {"fullname": "transformer.Scope.TestingWindowScope.__init__", "modulename": "transformer.Scope", "qualname": "TestingWindowScope.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">training_window_scope</span><span class=\"p\">:</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">Scope</span><span class=\"o\">.</span><span class=\"n\">WindowScope</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;testing_window_scope&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Season&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;size&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}}</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "transformer.Scope.TestingWindowScope.name", "modulename": "transformer.Scope", "qualname": "TestingWindowScope.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;testing_window_scope&#x27;"}, {"fullname": "transformer.Scope.TestingWindowScope.init_parameters", "modulename": "transformer.Scope", "qualname": "TestingWindowScope.init_parameters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;testing_window_scope&#x27;: {&#x27;col&#x27;: &#x27;Season&#x27;, &#x27;size&#x27;: 1}}"}, {"fullname": "transformer.Scope.TestingWindowScope.training_window_scope", "modulename": "transformer.Scope", "qualname": "TestingWindowScope.training_window_scope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.Scope.TestingWindowScope.set_parameters", "modulename": "transformer.Scope", "qualname": "TestingWindowScope.set_parameters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector", "modulename": "transformer.ScopeSelector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "transformer.ScopeSelector.ScopeSelector", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "transformer.ScopeSelector.ScopeSelector.scope", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector.scope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.ScopeSelector.ScopeSelector.transform", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector.transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.ScopeSelector.update", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.ScopeSelector.holds", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector.holds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.ScopeSelector.reset_state", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector.reset_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.ScopeSelector.current_state", "modulename": "transformer.ScopeSelector", "qualname": "ScopeSelector.current_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.WindowSelector", "modulename": "transformer.ScopeSelector", "qualname": "WindowSelector", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ScopeSelector"}, {"fullname": "transformer.ScopeSelector.WindowSelector.__init__", "modulename": "transformer.ScopeSelector", "qualname": "WindowSelector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">Scope</span><span class=\"o\">.</span><span class=\"n\">Scope</span></span>)</span>"}, {"fullname": "transformer.ScopeSelector.WindowSelector.transform", "modulename": "transformer.ScopeSelector", "qualname": "WindowSelector.transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.WindowSelector.current_state", "modulename": "transformer.ScopeSelector", "qualname": "WindowSelector.current_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.EnumSelector", "modulename": "transformer.ScopeSelector", "qualname": "EnumSelector", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ScopeSelector"}, {"fullname": "transformer.ScopeSelector.EnumSelector.__init__", "modulename": "transformer.ScopeSelector", "qualname": "EnumSelector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">Scope</span><span class=\"o\">.</span><span class=\"n\">EnumScope</span></span>)</span>"}, {"fullname": "transformer.ScopeSelector.EnumSelector.scope", "modulename": "transformer.ScopeSelector", "qualname": "EnumSelector.scope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "transformer.ScopeSelector.EnumSelector.transform", "modulename": "transformer.ScopeSelector", "qualname": "EnumSelector.transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "transformer.ScopeSelector.EnumSelector.current_state", "modulename": "transformer.ScopeSelector", "qualname": "EnumSelector.current_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Transformer", "modulename": "transformer.Transformer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "transformer.Transformer.Transformer", "modulename": "transformer.Transformer", "qualname": "Transformer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "transformer.Transformer.Transformer.transformations", "modulename": "transformer.Transformer", "qualname": "Transformer.transformations", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;names_to_ids&#x27;: True, &#x27;names_to_ids_scope&#x27;: False, &#x27;remove_small_seasons&#x27;: False, &#x27;result_column&#x27;: False, &#x27;score_diff&#x27;: False, &#x27;round_column&#x27;: False, &#x27;date_from_time&#x27;: False, &#x27;only_latest_odds&#x27;: False, &#x27;only_first_odds&#x27;: False, &#x27;first_and_latest_odds&#x27;: False}"}, {"fullname": "transformer.Transformer.Transformer.base_transformer", "modulename": "transformer.Transformer", "qualname": "Transformer.base_transformer", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;transformer.BaseTransformer.BaseTransformer object&gt;"}, {"fullname": "transformer.Transformer.Transformer.load_from_dict", "modulename": "transformer.Transformer", "qualname": "Transformer.load_from_dict", "kind": "function", "doc": "<p>Updates the <code>transformations</code> dictionary with key-value pairs from <code>transform_dict</code>.</p>\n\n<p>Args:\n    transform_dict (dict): A dictionary containing transformation keys and their corresponding values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Transformer.Transformer.load_from_list", "modulename": "transformer.Transformer", "qualname": "Transformer.load_from_list", "kind": "function", "doc": "<p>Sets the corresponding entries in the transformations dictionary to True for each element in transform_list.</p>\n\n<p>Args:\n    transform_list (list): A list of transformation keys to be updated in the transformations dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "transformer.Transformer.Transformer.transform", "modulename": "transformer.Transformer", "qualname": "Transformer.transform", "kind": "function", "doc": "<p>Applies transformations to the wrapper based on the active flags in the <code>transformations</code> dictionary.</p>\n\n<p>Args:\n    wrapper (DataWrapper): The data wrapper to be transformed.</p>\n\n<p>Returns:\n    DataWrapper: The transformed data wrapper after applying the selected transformations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils", "modulename": "utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.AttributeSetter", "modulename": "utils.AttributeSetter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.AttributeSetter.AttributeSetter", "modulename": "utils.AttributeSetter", "qualname": "AttributeSetter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "utils.AttributeSetter.AttributeSetter.set_attributes", "modulename": "utils.AttributeSetter", "qualname": "AttributeSetter.set_attributes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">attributes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.Cache", "modulename": "utils.Cache", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.Cache.Cache", "modulename": "utils.Cache", "qualname": "Cache", "kind": "class", "doc": "<p>Static utility class for caching Python objects using pickle.</p>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<p>save(obj, filepath):\n    Save an object to a file using pickle.</p>\n\n<p>load(filepath):\n    Load an object from a pickle file.</p>\n\n<p>exists(filepath):\n    Check if the cache file exists.</p>\n"}, {"fullname": "utils.Cache.Cache.save", "modulename": "utils.Cache", "qualname": "Cache.save", "kind": "function", "doc": "<p>Save an object to a pickle file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>obj : any\n    The Python object to save.\nfilepath : str\n    The path where the object should be saved.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Cache.Cache.load", "modulename": "utils.Cache", "qualname": "Cache.load", "kind": "function", "doc": "<p>Load an object from a pickle file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>filepath : str\n    The path to the pickle file.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>any\n    The loaded Python object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.Cache.Cache.exists", "modulename": "utils.Cache", "qualname": "Cache.exists", "kind": "function", "doc": "<p>Check if a cache file exists.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>filepath : str\n    The path to check.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>bool\n    True if the file exists, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation", "modulename": "utils.Evaluation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.Evaluation.Metric", "modulename": "utils.Evaluation", "qualname": "Metric", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "utils.Evaluation.Metric.ACCURACY", "modulename": "utils.Evaluation", "qualname": "Metric.ACCURACY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Metric.ACCURACY: &#x27;Accuracy&#x27;&gt;"}, {"fullname": "utils.Evaluation.Metric.PRECISION", "modulename": "utils.Evaluation", "qualname": "Metric.PRECISION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Metric.PRECISION: &#x27;Precision&#x27;&gt;"}, {"fullname": "utils.Evaluation.Metric.RECALL", "modulename": "utils.Evaluation", "qualname": "Metric.RECALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Metric.RECALL: &#x27;Recall&#x27;&gt;"}, {"fullname": "utils.Evaluation.Metric.F1_SCORE", "modulename": "utils.Evaluation", "qualname": "Metric.F1_SCORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Metric.F1_SCORE: &#x27;F1 Score&#x27;&gt;"}, {"fullname": "utils.Evaluation.Metric.BRIER_SCORE", "modulename": "utils.Evaluation", "qualname": "Metric.BRIER_SCORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Metric.BRIER_SCORE: &#x27;Brier Score&#x27;&gt;"}, {"fullname": "utils.Evaluation.Metric.RPS", "modulename": "utils.Evaluation", "qualname": "Metric.RPS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Metric.RPS: &#x27;RPS&#x27;&gt;"}, {"fullname": "utils.Evaluation.evaluate_metrics", "modulename": "utils.Evaluation", "qualname": "evaluate_metrics", "kind": "function", "doc": "<p>Evaluates classification metrics and returns a DataFrame summary, including Brier and RPS.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: DataFrame with columns [0, 1, 2] (predicted probabilities) and 'WDL' (true label)</li>\n<li>average: Averaging method for multi-class metrics.\nOptions: None (per class), 'macro', 'micro', 'weighted'</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>DataFrame summarizing accuracy, precision, recall, F1 score, confusion matrix,\nBrier Score, and RPS.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">average</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.get_valid_predictions", "modulename": "utils.Evaluation", "qualname": "get_valid_predictions", "kind": "function", "doc": "<p>Filters out rows with NaNs in prediction columns (0, 1, 2),\nthen returns predicted classes and true labels.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: DataFrame with columns [0, 1, 2] (predicted probabilities) and 'WDL' (true label)</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>preds: ndarray of predicted outcomes (int 0, 1, 2)</li>\n<li>labels: ndarray of true labels</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_accuracy", "modulename": "utils.Evaluation", "qualname": "compute_accuracy", "kind": "function", "doc": "<p>Computes the accuracy of predictions.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>preds: predicted outcomes</li>\n<li>labels: true outcomes</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>accuracy as a float (0.0 to 1.0)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_precision", "modulename": "utils.Evaluation", "qualname": "compute_precision", "kind": "function", "doc": "<p>Computes precision score per class.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>preds: predicted outcomes</li>\n<li>labels: true outcomes</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict of precision scores for each class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_recall", "modulename": "utils.Evaluation", "qualname": "compute_recall", "kind": "function", "doc": "<p>Computes recall score per class.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>preds: predicted class labels</li>\n<li>labels: true class labels</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict of recall scores for each class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_f1", "modulename": "utils.Evaluation", "qualname": "compute_f1", "kind": "function", "doc": "<p>Computes F1 score per class.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>preds: predicted class labels</li>\n<li>labels: true class labels</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict of F1 scores for each class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_confusion_matrix", "modulename": "utils.Evaluation", "qualname": "compute_confusion_matrix", "kind": "function", "doc": "<p>Computes the confusion matrix.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>preds: predicted class labels</li>\n<li>labels: true class labels</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>2D numpy array (confusion matrix)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_multiclass_brier_score", "modulename": "utils.Evaluation", "qualname": "compute_multiclass_brier_score", "kind": "function", "doc": "<p>Computes the multiclass Brier Score.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: DataFrame with columns [0, 1, 2] (predicted probabilities) and 'WDL' (true label)</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Brier Score: a float representing the mean squared error across all classes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Evaluation.compute_rps", "modulename": "utils.Evaluation", "qualname": "compute_rps", "kind": "function", "doc": "<p>Computes the Ranked Probability Score (RPS) for multi-class probabilistic predictions.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: DataFrame with columns [0, 1, 2] (predicted probabilities) and 'WDL' (true label)</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>RPS: a float representing the mean RPS score</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.MLFlowTracker", "modulename": "utils.MLFlowTracker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.MLFlowTracker.MLFlowTracker", "modulename": "utils.MLFlowTracker", "qualname": "MLFlowTracker", "kind": "class", "doc": "<p>A static MLflow tracker class to manage experiment runs and logging.</p>\n\n<p>This class uses class-level state to handle MLflow run lifecycle and logging\nwithout needing to instantiate objects.</p>\n"}, {"fullname": "utils.MLFlowTracker.MLFlowTracker.set_experiment", "modulename": "utils.MLFlowTracker", "qualname": "MLFlowTracker.set_experiment", "kind": "function", "doc": "<p>Set the MLflow experiment to log runs to.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>experiment_name : str\n    The name of the MLflow experiment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">experiment_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.MLFlowTracker.MLFlowTracker.start_run", "modulename": "utils.MLFlowTracker", "qualname": "MLFlowTracker.start_run", "kind": "function", "doc": "<p>Start a new MLflow run.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>run_name : str, optional\n    Optional name for the MLflow run (default is None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.MLFlowTracker.MLFlowTracker.log_params", "modulename": "utils.MLFlowTracker", "qualname": "MLFlowTracker.log_params", "kind": "function", "doc": "<p>Log multiple parameters to the current MLflow run.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>params : dict\n    Dictionary of parameter names and values to log.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>RuntimeError\n    If called before starting a run.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.MLFlowTracker.MLFlowTracker.log_metrics", "modulename": "utils.MLFlowTracker", "qualname": "MLFlowTracker.log_metrics", "kind": "function", "doc": "<p>Log multiple metrics to the current MLflow run.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>metrics : dict\n    Dictionary of metric names and values to log.\nstep : int, optional\n    Optional step index for the metrics (default is None).</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>RuntimeError\n    If called before starting a run.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.MLFlowTracker.MLFlowTracker.end_run", "modulename": "utils.MLFlowTracker", "qualname": "MLFlowTracker.end_run", "kind": "function", "doc": "<p>End the current MLflow run if it exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Merger", "modulename": "utils.Merger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.Merger.Merger", "modulename": "utils.Merger", "qualname": "Merger", "kind": "class", "doc": "<p>Merges multiple DataWrapper objects into a single, unified DataWrapper.</p>\n\n<p>This is useful for combining match data from multiple sources (e.g., different leagues)\ninto a consolidated dataset, assuming all input wrappers are compatible in terms of\nschema and semantics.</p>\n"}, {"fullname": "utils.Merger.Merger.compute", "modulename": "utils.Merger", "qualname": "Merger.compute", "kind": "function", "doc": "<p>Merges a list of compatible DataWrapper instances into one.</p>\n\n<p>This method performs the following steps:</p>\n\n<ul>\n<li>Collects all unique feature and label columns from the wrappers.</li>\n<li>Merges the underlying DataFrames using common columns as join keys.</li>\n<li>Creates a deep copy of the first wrapper and replaces its data with the merged DataFrame.</li>\n<li>Combines team ID sets from all wrappers.</li>\n</ul>\n\n<p>Args:\n    wrappers (List[DataWrapper]): A list of DataWrapper objects to be merged.\n                                   All wrappers must have compatible schemas.</p>\n\n<p>Returns:\n    DataWrapper: A new DataWrapper containing the merged data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wrappers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.Merger.Merger.merge", "modulename": "utils.Merger", "qualname": "Merger.merge", "kind": "function", "doc": "<p>Merges multiple DataFrames using their common columns.</p>\n\n<p>All DataFrames must have overlapping columns and be compatible for joining.\nThis method performs a series of inner merges on the shared columns across\nall DataFrames in the list.</p>\n\n<p>Args:\n    dfs (List[pd.DataFrame]): A list of pandas DataFrames to be merged.</p>\n\n<p>Returns:\n    pd.DataFrame: A single DataFrame resulting from merging all inputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dfs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.TeamStrengthGraph", "modulename": "utils.TeamStrengthGraph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph", "kind": "class", "doc": "<p>A class that represents a time-aware team interaction graph for use in GNN models,\nspecifically for encoding team matchups and their outcomes over time.</p>\n\n<p>Attributes:\n    scope: A scope object used for iterative transformation of the input data.\n    column (str): The data column used to distinguish graphs (e.g., by league).\n    graphs (dict): A dictionary of computed graphs keyed by scope state.</p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.__init__", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.__init__", "kind": "function", "doc": "<p>Initialize the TeamStrengthGraph.</p>\n\n<p>Args:\n    scope: A scope object that provides access to transformed data and state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">ScopeSelector</span><span class=\"o\">.</span><span class=\"n\">ScopeSelector</span></span>)</span>"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.scope", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.scope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.column", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.graphs", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.graphs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.compute", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.compute", "kind": "function", "doc": "<p>Computes graphs for each state in the scope and stores them internally.</p>\n\n<p>Args:\n    wrapper: A data wrapper object used for transformation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrapper</span><span class=\"p\">:</span> <span class=\"n\">datawrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span><span class=\"o\">.</span><span class=\"n\">DataWrapper</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph", "kind": "class", "doc": "<p>A class representing a directed temporal graph of team interactions.</p>\n\n<p>Attributes:\n    num_matches (int): Total number of matches in the dataset.\n    edge_index (torch.Tensor): Tensor of shape [2, num_edges] containing directed edges.\n    edge_weight (torch.Tensor): Tensor of edge weights based on recency.\n    edge_time (torch.Tensor): Matrix of last match times between teams.\n    curr_time (int): Current time step (match index).\n    num_teams (int): Total number of unique teams.</p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.__init__", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.__init__", "kind": "function", "doc": "<p>Initializes a new Graph.</p>\n\n<p>Args:\n    num_teams (int): Number of unique teams.\n    num_matches (int): Total number of matches (for normalization).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_teams</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">num_matches</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.num_matches", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.num_matches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.edge_index", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.edge_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.edge_weight", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.edge_weight", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.edge_time", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.edge_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.curr_time", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.curr_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.num_teams", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.num_teams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.compute", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.compute", "kind": "function", "doc": "<p>Updates the graph with new match results and returns a PyTorch Geometric Data object.</p>\n\n<p>Args:\n    home (np.ndarray): Array of encoded home team indices.\n    away (np.ndarray): Array of encoded away team indices.\n    result (np.ndarray): Array of match results (0=draw, 1=home win, 2=away win).\n    time_weighing (str): Time decay strategy, either \"linear\" or \"exponential\".</p>\n\n<p>Returns:\n    Data: PyTorch Geometric graph object with edge_index and edge_weight.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">home</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">away</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_weighing</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;linear&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch_geometric</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span>:</span></span>", "funcdef": "def"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.update_edge_time", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.update_edge_time", "kind": "function", "doc": "<p>Updates the edge_time matrix to record when matches occurred between teams.</p>\n\n<p>Args:\n    home (np.ndarray): Encoded indices of home teams.\n    away (np.ndarray): Encoded indices of away teams.\n    result (np.ndarray): Match results (0=draw, 1=home win, 2=away win).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">home</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">away</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.update_edge_index", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.update_edge_index", "kind": "function", "doc": "<p>Updates the edge_index tensor with current directed edges.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.calculate_edge_weight", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.calculate_edge_weight", "kind": "function", "doc": "<p>Computes edge weights based on time decay since the last match.</p>\n\n<p>Args:\n    time_weighing (str): \"linear\" or \"exponential\" decay of influence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_weighing</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;linear&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.TeamStrengthGraph.TeamStrengthGraph.Graph.build_graph", "modulename": "utils.TeamStrengthGraph", "qualname": "TeamStrengthGraph.Graph.build_graph", "kind": "function", "doc": "<p>Builds and returns a PyTorch Geometric Data object from the current state.</p>\n\n<p>Returns:\n    Data: A graph with edge_index, edge_attr (weights), and num_nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch_geometric</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();